// Операции с массивами
// важность: 5
// Давайте произведём 5 операций с массивом.
//
//   1.  Создайте массив styles с элементами «Джаз» и «Блюз».
//   2.  Добавьте «Рок-н-ролл» в конец.
//   3.   Замените значение в середине на «Классика».
//   Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
//    4. Удалите первый элемент массива и покажите его.
//     Вставьте Рэп и Регги в начало массива.
//     Массив по ходу выполнения операций:
//
//     Джаз, Блюз
// Джаз, Блюз, Рок-н-ролл   // этого добились, работает
// Джаз, Классика, Рок-н-ролл
// Классика, Рок-н-ролл
// Рэп, Регги, Классика, Рок-н-ролл

const objects33 = function () {

    let styles = ['Джаз', 'Блюз'];
    alert(styles);
    styles.push('Рок-н-ролл');
    alert(styles);

    let element = prompt('Введите новое значение элемента массива', 'Классика');

if ((styles.length % 2) === 0) {

    let a = (styles.length / 2) - 1;
    styles[a] = element;
}
   else {

       let a = Math.trunc(styles.length / 2);
    styles[a] = element;
}

alert(styles);




//     // 3. заменить значение в середине, это заменить элемент массива который не равен 0 и не равен конечному элементу,
//     // т.е. меньше styles.length.
//     // не совсем понятно условие в середине.. отталкиваюсь от того, что поменяем элемент который на месте 1, при
//     // условии что он меньше  styles.length - 1.
//     // если условия сравнения не выполняются, то возвращаем массив как есть, без изменений
//     // чтобы условие работало для массивов любой длины
//
//     function replace() {
//         // написать код для поиска значнений в середине массива
//         let len = styles.length;
//     //
//         for (let i = 0; i < len; i++) {
//
//             if (i === 1 && i < len) {
// return i;
// break;
//             }
//             return styles;
//         }
//         styles[1] = b;
//         alert (styles);
//     }
//     //
//     //     if ((i > 0) && (i < len)) {
//     //         alert(replace()(styles[1]));
//     //         styles[1] = b;
//     //         alert(replace()(styles[1]));
//     //         alert(replace()(styles));
//     //     }
//     //     alert (styles);
//     // }
//     //
//
//     alert(replace());

    // function replace(styles) {
    //
    //     for (let a of styles) {
    //         if ((a >= 0) && (a < len)) {
    //             return a;
    //         } else if (a === 1) {
    //             let d = styles[1];
    //             styles[1] = element;
    //             break;
    //         }
    //     }
    // return d;
    // }
    //
    // alert(replace(styles));
};







